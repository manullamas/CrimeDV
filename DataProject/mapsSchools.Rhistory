})
# Adding station distance and name dimensions to crime vector
# Check to ensure data is fit to be inserted into mongodb
if (all(is.na(distances))) {
x["School"] <- NA
x["SchoolDistance"] <- NA
}
else {
index <- which.min(distances)
x["School"] <- secSchoolsLondon$EstablishmentName[index]
kilometers <- distance(as.numeric(x["Latitude"]), as.numeric(x["Longitude"]),
as.numeric(secSchoolsLondon$Latitude[index]),
as.numeric(secSchoolsLondon$Longitude[index]))
x["SchoolDistance"] <- kilometers
}
# Calculate LSOA name and LA name
#x["LocalAuthority"] <- filter(LSOA, LSOAcode == x["LSOA.code"])[1,"LAname"]
return(x)
})
t4 <- Sys.time()
print(paste("Time to make calculations:", round(t4 - t3, 4), attr(t4 - t3, "units")))
dataframe <- as.data.frame(t(processed), stringsAsFactors = F)
dataframe$Latitude <- as.numeric(dataframe$Latitude)
dataframe$Longitude <- as.numeric(dataframe$Longitude)
dataframe$SchoolDistance <- as.numeric(dataframe$SchoolDistance)
#dataframe$ISOMonth <- as.POSIXlt(paste0(dataframe$Month, "-01"), "%Y-%m-%d", tz = "GMT")
bson <- mongo.bson.from.df(dataframe)
# Clean the names by removing the '.' (e.g. "LSOA.code")
names(dataframe) <- gsub("\\.", "", names(dataframe))
t5 <- Sys.time()
print(paste("Time to process bson:", round(t5 - t4, 4), attr(t5 - t4, "units")))
write.csv(dataframe, paste0("processed/", londonNames[i]))
# Insert into mongodb (must be done in batches of ~40000 or fails)
createMongo()
batchSize <- 1000
batches <- ceiling( entries / batchSize )
remainder <- entries %% batchSize
for (j in 1:(batches)) {
if (batches != 1) {
if ( j == batches) {
min <- entries - remainder
createMongo
mongo.insert.batch(mongo, CRIME, bson[min:entries])
} else {
min <- ((j - 1)*batchSize + 1)
max <- j*(batchSize)
createMongo()
mongo.insert.batch(mongo, CRIME, bson[ min:max ])
}
} else {
createMongo()
mongo.insert.batch(mongo, CRIME, bson)
}
print(paste("Batch", j, "of", batches, "inserted"))
}
t6 <- Sys.time()
print(paste("Time to insert documents:", round(t6 - t5, 4), attr(t6 - t5, "units")))
totalProcessed <- totalProcessed + entries
print(paste("Total Entries Processed:", totalProcessed))
}
distRad <- function(lat1, long1, lat2, long2) {
a <- (lat1 - lat2) ^ 2 + (long2 - long1) ^ 2
return(a)
}
distance <- function(lat1, long1, lat2, long2) {
# Convert arguments to radians
lat1 = pi * lat1 / 180
lat2 = pi * lat2 / 180
long1 = pi * long1 / 180
long2 = pi * long2 / 180
# Calculates distance using
a <- sin( (lat1 - lat2)/2 ) ^ 2 + cos(lat1)*cos(lat2)* sin( (long1 - long2)/2 ) ^ 2
c = 2 * atan2( sqrt(a), sqrt(1 - a))
d = 6371 * c
return(d)
}
files <- list.files(path = "Datasets/NationalData", full.names = TRUE, recursive = TRUE)
fileNames <- list.files(path = "Datasets/NationalData", full.names = FALSE, recursive = TRUE)
londonfiles <- grep( pattern = ("city-of-london-street|metropolitan-street|btp-street"), files, value = TRUE)
londonNames <- grep( pattern = ("city-of-london-street|metropolitan-street|btp-street"), fileNames, value = TRUE)
londonNames <- gsub("^.*?/", "", londonNames)
LSOA <- read.csv("Datasets/LSOAlookup/OA11_LSOA11_MSOA11_LAD11_EW_LUv2.csv", stringsAsFactors = F)
names(LSOA) <- c("OutputAreaCode", "LSOAcode", "LSOAname", "MSOAcode", "MSOAname", "LAcode", "LAname", "LAWelshName")
startTime <- Sys.time()
for (i in seq(1, 174, 3)) {
t2a <- Sys.time()
table <- read.csv(londonfiles[i])
entries <- nrow(table)
t3 <- Sys.time()
print(paste("Processing:", londonfiles[i]))
print(paste("Time to read csv:", round(t3 - t2a, 4), attr(t3 - t2a, "units"),
"(", entries, " Entries )"))
# Loop over every station for every crime in file
processed <- apply(table, 1, function(x){
# Calculate distance to school
distances <- apply(secSchoolsLondon, 1, function(y) {
distRad(as.numeric(x["Latitude"]), as.numeric(x["Longitude"]),
as.numeric(y["Latitude"]), as.numeric(y["Longitude"]))
})
# Adding station distance and name dimensions to crime vector
# Check to ensure data is fit to be inserted into mongodb
if (all(is.na(distances))) {
x["School"] <- NA
x["SchoolDistance"] <- NA
}
else {
index <- which.min(distances)
x["School"] <- secSchoolsLondon$EstablishmentName[index]
kilometers <- distance(as.numeric(x["Latitude"]), as.numeric(x["Longitude"]),
as.numeric(secSchoolsLondon$Latitude[index]),
as.numeric(secSchoolsLondon$Longitude[index]))
x["SchoolDistance"] <- kilometers
}
# Calculate LSOA name and LA name
#x["LocalAuthority"] <- filter(LSOA, LSOAcode == x["LSOA.code"])[1,"LAname"]
return(x)
})
t4 <- Sys.time()
print(paste("Time to make calculations:", round(t4 - t3, 4), attr(t4 - t3, "units")))
dataframe <- as.data.frame(t(processed), stringsAsFactors = F)
dataframe$Latitude <- as.numeric(dataframe$Latitude)
dataframe$Longitude <- as.numeric(dataframe$Longitude)
dataframe$SchoolDistance <- as.numeric(dataframe$SchoolDistance)
#dataframe$ISOMonth <- as.POSIXlt(paste0(dataframe$Month, "-01"), "%Y-%m-%d", tz = "GMT")
bson <- mongo.bson.from.df(dataframe)
# Clean the names by removing the '.' (e.g. "LSOA.code")
names(dataframe) <- gsub("\\.", "", names(dataframe))
t5 <- Sys.time()
print(paste("Time to process bson:", round(t5 - t4, 4), attr(t5 - t4, "units")))
write.csv(dataframe, paste0("processed/", londonNames[i]))
# Insert into mongodb (must be done in batches of ~40000 or fails)
createMongo()
batchSize <- 1000
batches <- ceiling( entries / batchSize )
remainder <- entries %% batchSize
for (j in 1:(batches)) {
if (batches != 1) {
if ( j == batches) {
min <- entries - remainder
createMongo
mongo.insert.batch(mongo, CRIME, bson[min:entries])
} else {
min <- ((j - 1)*batchSize + 1)
max <- j*(batchSize)
createMongo()
mongo.insert.batch(mongo, CRIME, bson[ min:max ])
}
} else {
createMongo()
mongo.insert.batch(mongo, CRIME, bson)
}
print(paste("Batch", j, "of", batches, "inserted"))
}
t6 <- Sys.time()
print(paste("Time to insert documents:", round(t6 - t5, 4), attr(t6 - t5, "units")))
totalProcessed <- totalProcessed + entries
print(paste("Total Entries Processed:", totalProcessed))
}
library("rmongodb", lib.loc="~/R/win-library/3.2")
for (i in seq(1, 174, 3)) {
t2a <- Sys.time()
table <- read.csv(londonfiles[i])
entries <- nrow(table)
t3 <- Sys.time()
print(paste("Processing:", londonfiles[i]))
print(paste("Time to read csv:", round(t3 - t2a, 4), attr(t3 - t2a, "units"),
"(", entries, " Entries )"))
# Loop over every station for every crime in file
processed <- apply(table, 1, function(x){
# Calculate distance to school
distances <- apply(secSchoolsLondon, 1, function(y) {
distRad(as.numeric(x["Latitude"]), as.numeric(x["Longitude"]),
as.numeric(y["Latitude"]), as.numeric(y["Longitude"]))
})
# Adding station distance and name dimensions to crime vector
# Check to ensure data is fit to be inserted into mongodb
if (all(is.na(distances))) {
x["School"] <- NA
x["SchoolDistance"] <- NA
}
else {
index <- which.min(distances)
x["School"] <- secSchoolsLondon$EstablishmentName[index]
kilometers <- distance(as.numeric(x["Latitude"]), as.numeric(x["Longitude"]),
as.numeric(secSchoolsLondon$Latitude[index]),
as.numeric(secSchoolsLondon$Longitude[index]))
x["SchoolDistance"] <- kilometers
}
# Calculate LSOA name and LA name
#x["LocalAuthority"] <- filter(LSOA, LSOAcode == x["LSOA.code"])[1,"LAname"]
return(x)
})
t4 <- Sys.time()
print(paste("Time to make calculations:", round(t4 - t3, 4), attr(t4 - t3, "units")))
dataframe <- as.data.frame(t(processed), stringsAsFactors = F)
dataframe$Latitude <- as.numeric(dataframe$Latitude)
dataframe$Longitude <- as.numeric(dataframe$Longitude)
dataframe$SchoolDistance <- as.numeric(dataframe$SchoolDistance)
#dataframe$ISOMonth <- as.POSIXlt(paste0(dataframe$Month, "-01"), "%Y-%m-%d", tz = "GMT")
bson <- mongo.bson.from.df(dataframe)
# Clean the names by removing the '.' (e.g. "LSOA.code")
names(dataframe) <- gsub("\\.", "", names(dataframe))
t5 <- Sys.time()
print(paste("Time to process bson:", round(t5 - t4, 4), attr(t5 - t4, "units")))
write.csv(dataframe, paste0("processed/", londonNames[i]))
# Insert into mongodb (must be done in batches of ~40000 or fails)
createMongo()
batchSize <- 1000
batches <- ceiling( entries / batchSize )
remainder <- entries %% batchSize
for (j in 1:(batches)) {
if (batches != 1) {
if ( j == batches) {
min <- entries - remainder
createMongo
mongo.insert.batch(mongo, CRIME, bson[min:entries])
} else {
min <- ((j - 1)*batchSize + 1)
max <- j*(batchSize)
createMongo()
mongo.insert.batch(mongo, CRIME, bson[ min:max ])
}
} else {
createMongo()
mongo.insert.batch(mongo, CRIME, bson)
}
print(paste("Batch", j, "of", batches, "inserted"))
}
t6 <- Sys.time()
print(paste("Time to insert documents:", round(t6 - t5, 4), attr(t6 - t5, "units")))
totalProcessed <- totalProcessed + entries
print(paste("Total Entries Processed:", totalProcessed))
}
createMongo()
mongo.is.connected(mongo)
for (i in seq(1, 174, 3)) {
t2a <- Sys.time()
table <- read.csv(londonfiles[i])
entries <- nrow(table)
t3 <- Sys.time()
print(paste("Processing:", londonfiles[i]))
print(paste("Time to read csv:", round(t3 - t2a, 4), attr(t3 - t2a, "units"),
"(", entries, " Entries )"))
# Loop over every station for every crime in file
processed <- apply(table, 1, function(x){
# Calculate distance to school
distances <- apply(secSchoolsLondon, 1, function(y) {
distRad(as.numeric(x["Latitude"]), as.numeric(x["Longitude"]),
as.numeric(y["Latitude"]), as.numeric(y["Longitude"]))
})
# Adding station distance and name dimensions to crime vector
# Check to ensure data is fit to be inserted into mongodb
if (all(is.na(distances))) {
x["School"] <- NA
x["SchoolDistance"] <- NA
}
else {
index <- which.min(distances)
x["School"] <- secSchoolsLondon$EstablishmentName[index]
kilometers <- distance(as.numeric(x["Latitude"]), as.numeric(x["Longitude"]),
as.numeric(secSchoolsLondon$Latitude[index]),
as.numeric(secSchoolsLondon$Longitude[index]))
x["SchoolDistance"] <- kilometers
}
# Calculate LSOA name and LA name
#x["LocalAuthority"] <- filter(LSOA, LSOAcode == x["LSOA.code"])[1,"LAname"]
return(x)
})
t4 <- Sys.time()
print(paste("Time to make calculations:", round(t4 - t3, 4), attr(t4 - t3, "units")))
dataframe <- as.data.frame(t(processed), stringsAsFactors = F)
dataframe$Latitude <- as.numeric(dataframe$Latitude)
dataframe$Longitude <- as.numeric(dataframe$Longitude)
dataframe$SchoolDistance <- as.numeric(dataframe$SchoolDistance)
#dataframe$ISOMonth <- as.POSIXlt(paste0(dataframe$Month, "-01"), "%Y-%m-%d", tz = "GMT")
bson <- mongo.bson.from.df(dataframe)
# Clean the names by removing the '.' (e.g. "LSOA.code")
names(dataframe) <- gsub("\\.", "", names(dataframe))
t5 <- Sys.time()
print(paste("Time to process bson:", round(t5 - t4, 4), attr(t5 - t4, "units")))
write.csv(dataframe, paste0("processed/", londonNames[i]))
# Insert into mongodb (must be done in batches of ~40000 or fails)
createMongo()
batchSize <- 1000
batches <- ceiling( entries / batchSize )
remainder <- entries %% batchSize
for (j in 1:(batches)) {
if (batches != 1) {
if ( j == batches) {
min <- entries - remainder
createMongo
mongo.insert.batch(mongo, CRIME, bson[min:entries])
} else {
min <- ((j - 1)*batchSize + 1)
max <- j*(batchSize)
createMongo()
mongo.insert.batch(mongo, CRIME, bson[ min:max ])
}
} else {
createMongo()
mongo.insert.batch(mongo, CRIME, bson)
}
print(paste("Batch", j, "of", batches, "inserted"))
}
t6 <- Sys.time()
print(paste("Time to insert documents:", round(t6 - t5, 4), attr(t6 - t5, "units")))
totalProcessed <- totalProcessed + entries
print(paste("Total Entries Processed:", totalProcessed))
}
library(leafletR)
addBaseMap <- function(name, title, url, options) {
# get existing base maps
baseMaps <-  getOption("leafletBaseMaps")
# create base map
if(missing(title)) title <- name
newBaseMap <- list(title=title, url=url)
if(missing(options)) options <- NULL
newBaseMap$options <- options
# add base map
baseMaps[[name]] <- newBaseMap
options(leafletBaseMaps=baseMaps)
}
library(RgoogleMaps)
x <- c("ggmap", "rgdal", "rgeos", "maptools", "dplyr", "tidyr", "tmap")
install.packages(x) # warning: this may take a number of minutes
lapply(x, library, character.only = TRUE) # load the required packages
library(rworldmap)
install.packages("rworldmap")
library(rworldmap)
newmap <- getMap(resolution = "low")
plot(newmap, xlim = c(-20, 59), ylim = c(35, 71), asp = 1)
?newmap
??newmap
?getMap
install.packages("rworldxtra")
libraruy(rworldxtra)
library(rworldxtra)
newmap <- getMap(resolution = "high")
plot(newmap, xlim = c(-20, 59), ylim = c(35, 71), asp = 1)
plot(newmap, xlim = c(-3, 3), ylim = c(45, 55), asp = 1)
plot(newmap, xlim = c(-1, 1), ylim = c(49, 51), asp = 1)
plot(newmap, xlim = c(-2, 2), ylim = c(48, 51), asp = 2)
plot(newmap, xlim = c(-3, 3), ylim = c(47, 53), asp = 2)
library(ggmap)
map <- get_map(location = 'Europe', zoom = 4)
library(mapproj)
map <- get_map(location = 'Europe', zoom = 4)
library(ggmap)
library(mapproj)
map <- get_map(location = 'Europe', zoom = 4)
ggmap(map)
map <- get_map(location = 'London', zoom = 4)
ggmap(map)
?get_map
map <- get_map(location = 'London', zoom = 10)
ggmap(map)
library(ggmap)
library(mapproj)
map <- get_map(location = 'Europe', zoom = 4)
ggmap(map)
library(rworldmap)
newmap <- getMap(resolution = "low")
plot(newmap)
plot(newmap,
xlim = c(-20, 59),
ylim = c(35, 71),
asp = 1
)
library(ggmap)
europe.limits <- geocode(c("CapeFligely,RudolfIsland,Franz Josef Land,Russia",
"Gavdos,Greece",
"Faja Grande,Azores",
"SevernyIsland,Novaya Zemlya,Russia")
)
europe.limits
plot(newmap,
xlim = range(europe.limits$lon),
ylim = range(europe.limits$lat),
asp = 1
)
library(ggmap)
library(mapproj)
map <- get_map(location = 'London', zoom = 10)
ggmap(map)
mapPoints <- ggmap(map) +
+   geom_point(aes(x = lon, y = lat, size = sqrt(flights)), data = airportD, alpha = .5)
geom_points
?geom_points
?geom_point
mapPoints <- ggmap(map) +
+   geom_point(aes(x = lon, y = lat, size = 3))#, data = airportD, alpha = .5)
mapPoints <- ggmap(map) + geom_point(aes(x = lon, y = lat, size = 3))#, data = airportD, alpha = .5)
plot(mapPoints)
createMongo <- function() {
if (exists("mongo")) {
try(mongo.destroy(mongo))
}
mongo <<- mongo.create(host = "mongodb-dse662l3.cloudapp.net:27017", db = DB)
return(mongo.is.connected(mongo))
}
Schools <- mongo.find.all(mongo, SCHOOLS)
schoolsLocations <- data.frame(Schools)
mongo <- mongo.create(host = "mongodb-dse662l3.cloudapp.net:27017", db = DB)
library(rmongodb)
mongo <- mongo.create(host = "mongodb-dse662l3.cloudapp.net:27017", db = DB)
Schools <- mongo.find.all(mongo, SCHOOLS)
SCHOOLS <- paste(DB, "schools", sep = ".")
CRIME <- paste(DB, "londonCrime6", sep = ".")
DB <- "DSproject"
Schools <- mongo.find.all(mongo, SCHOOLS)
schoolsLocations <- data.frame(Schools)
View(schoolsLocations)
schoolsLocations <- as.data.frame(Schools)
?data.frame
schoolsLocations <- as.data.frame(Schools, stringsAsFactors = FALSE)
Schools <- mongo.find.all(mongo, SCHOOLS)
schoolsLocations <- as.data.frame(Schools, stringsAsFactors = FALSE)
?as.data.frame
schoolsLocations <- as.data.frame(Schools, nrow = 679, stringsAsFactors = FALSE)
View(schoolsLocations)
class(Schools)
class(schoolsLocations)
schoolsLocations <- do.call(rbind.data.frame, Schools)
View(schoolsLocations)
schoolsLocations <- schoolsLocations[,2:6]
View(schoolsLocations)
View(schoolsLocations)
mapPoints <- ggmap(map) + geom_point(aes(x = Longitude, y = Latitude, size = 3), data = schoolsLocations , alpha = .5)
plot(mapPoints)
View(secSchoolsLondon)
View(schoolsLocations)
View(secSchoolsLondon)
View(secSchoolsLondon)
secSchoolsLond <- data.frame(
School = secSchoolsLondon$EstablishmentName,
Latitude = secSchoolsLondon$Latitude,
Longitude = secSchoolsLondon$Longitude,
Borough = secSchoolsLondon$LA..name.,
TypeOfSchool = secSchoolsLondon$TypeOfEstablishment..name.
PhaseOfEducation = secSchoolsLondon$PhaseOfEducation..name.
Gender = secSchoolsLondon$Gender..name.
ReligiousCharacter = secSchoolsLondon$ReligiousCharacter..name.
Postcode = secSchoolsLondon$Postcode)
secSchoolsLond <- data.frame(
School = secSchoolsLondon$EstablishmentName,
Latitude = secSchoolsLondon$Latitude,
Longitude = secSchoolsLondon$Longitude,
Borough = secSchoolsLondon$LA..name.,
TypeOfSchool = secSchoolsLondon$TypeOfEstablishment..name.,
PhaseOfEducation = secSchoolsLondon$PhaseOfEducation..name.,
Gender = secSchoolsLondon$Gender..name.,
ReligiousCharacter = secSchoolsLondon$ReligiousCharacter..name.,
Postcode = secSchoolsLondon$Postcode)
View(secSchoolsLond)
class(secSchoolsLond$Gender)
secSchoolsLond <- data.frame(
School = secSchoolsLondon$EstablishmentName,
Latitude = secSchoolsLondon$Latitude,
Longitude = secSchoolsLondon$Longitude,
Borough = secSchoolsLondon$LA..name.,
TypeOfSchool = secSchoolsLondon$TypeOfEstablishment..name.,
PhaseOfEducation = secSchoolsLondon$PhaseOfEducation..name.,
Gender = secSchoolsLondon$Gender..name.,
ReligiousCharacter = secSchoolsLondon$ReligiousCharacter..name.,
Postcode = secSchoolsLondon$Postcode, stringsAsFactors = F)
class(secSchoolsLond$Gender)
secSchoolsLond <- data.frame(
School = secSchoolsLondon$EstablishmentName,
Latitude = secSchoolsLondon$Latitude,
Longitude = secSchoolsLondon$Longitude,
Borough = secSchoolsLondon$LA..name.,
TypeOfSchool = secSchoolsLondon$TypeOfEstablishment..name.,
PhaseOfEducation = secSchoolsLondon$PhaseOfEducation..name.,
Gender = secSchoolsLondon$Gender..name.,
ReligiousCharacter = secSchoolsLondon$ReligiousCharacter..name.,
Postcode = secSchoolsLondon$Postcode, stringsAsFactors = FALSE)
class(secSchoolsLond$Gender)
secSchoolsLond$Latitude <- as.numeric(schools$Latitude)
secSchoolsLond$Longitude <- as.numeric(schools$Longitude)
secSchoolsLond$School <- as.character(schools$School)
secSchoolsLond$Borough <- as.character(schools$Borough)
secSchoolsLond$TypeOfSchool <- as.character(schools$TypeOfSchool)
secSchoolsLond$PhaseOfEducation <- as.character(schools$PhaseOfEducation)
secSchoolsLond$Gender <- as.character(schools$Gender)
secSchoolsLond$ReligiousCharacter <- as.character(schools$ReligiousCharacter)
secSchoolsLond$Postcode <- as.character(schools$Postcode)
SCHOOLS <- paste(DB, "secSchoolsLond", sep = ".")
secSchoolsLond$Latitude <- as.numeric(secSchoolsLond$Latitude)
secSchoolsLond$Longitude <- as.numeric(secSchoolsLond$Longitude)
secSchoolsLond$School <- as.character(secSchoolsLond$School)
secSchoolsLond$Borough <- as.character(secSchoolsLond$Borough)
secSchoolsLond$TypeOfSchool <- as.character(secSchoolsLond$TypeOfSchool)
secSchoolsLond$PhaseOfEducation <- as.character(secSchoolsLond$PhaseOfEducation)
secSchoolsLond$Gender <- as.character(secSchoolsLond$Gender)
secSchoolsLond$ReligiousCharacter <- as.character(secSchoolsLond$ReligiousCharacter)
secSchoolsLond$Postcode <- as.character(secSchoolsLond$Postcode)
class(secSchoolsLond$Gender)
class(secSchoolsLond$ReligiousCharacter)
secSchoolsBson <-  mongo.bson.from.df(secSchoolsLond)
mongo.insert.batch(mongo, SecondarySchoolsLondon, secSchoolsBson)
createMongo()
secSchoolsBson <-  mongo.bson.from.df(secSchoolsLond)
mongo.insert.batch(mongo, SCHOOLS, secSchoolsBson)
secSchoolsLond <- filter(secSchoolsLond, !grepl(c("^Bowden House School$|^Bradstow School$"), secSchoolsLond$School))
View(schoolsLocations)
View(schoolsLocations)
secSchoolsLondonUpdate <- cbin(secSchoolsLond, schoolsLocations[,4:5])
secSchoolsLondonUpdate <- cbind(secSchoolsLond, schoolsLocations[,4:5])
View(secSchoolsLondonUpdate)
secSchoolsBson <-  mongo.bson.from.df(secSchoolsLondonUpdate)
mongo.insert.batch(mongo, SCHOOLS, secSchoolsBson)
savehistory("C:/Users/Manuel/Desktop/CrimeProject/CrimeDV/DataProject/mapsSchools.Rhistory")
